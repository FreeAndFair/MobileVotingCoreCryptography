// Needham-Schroeder Domain Model

// Joe Kiniry <kiniry@freeandfair.us>
// Daniel M. Zimmerman <dmz@freeandfair.us>

// This domain model depends upon the Cryptography domain model.

system NeedhamSchroederSymmetric
  A session key generation protocol that uses a trusted server and symmetric encryption.

indexing
  author: Joseph Kiniry <kiniry@freeandfair.us>, Daniel M. Zimmerman <dmz@freeandfair.us>
  organization: Free & Fair
  keywords: pedagogy, Needham-Schroeder, session key
  created: Mon Dec 30 10:17:00 GMT+0800 2024
  revised: February 2024
  github: https://github.com/FreeAndFair/e2eviv -- doesn't exist yet

subsystem Basic Cryptography
  Core cryptographic concepts; a subset of the Cryptography domain model from the E2E-VIV project.

  contains
  // Source: Wikipedia
  component Plain Text (Plaintext)
    Data in its original, unencrypted form that is readable and understandable without any decryption.

  // Source: Wikipedia
  component Ciphertext
    The result of encryption performed on plaintext using an algorithm, called a cipher. Ciphertext is also known as encrypted or encoded information because it contains a form of the original plaintext that is unreadable by a human or computer without the proper cipher and the appropriate decryption key.

  // Source: HA Crypto
  component Stream
    An unbounded length sequence of bits.

  // Source: Wikipedia
  component Keystream
    A stream of key material generated by a stream cipher's algorithm that is combined with plaintext to produce ciphertext. The keystream is typically generated from a cryptographic key and an initialization vector (IV), ensuring that the same plaintext encrypted with different keys or IVs results in different ciphertexts.

  // Source: HA Crypto
  component Block
    A fixed length sequence of bits.

  // Source: NIST
  component Decryption
    The process of transforming ciphertext into plaintext using a cryptographic algorithm and key.

  // Source: NIST
  component Encryption
    Cryptographic process of transforming data (plaintext) into a form (ciphertext) that conceals the data's original meaning to prevent it from being known or used. Encryption provides confidentiality protection.

  // Source: Wikipedia
  component Cipher
    An algorithm used in cryptography to convert plain text into encrypted text (ciphertext) by transforming individual characters or bits of information. Unlike codes, which substitute entire words or phrases, ciphers operate at a more granular level, manipulating letters, numbers, or binary data to obscure the original message.

  // Source: Wikipedia
  component Key
    A string of data used with cryptographic algorithms to encrypt or decrypt data, authenticate messages, or verify digital signatures. Keys are categorized into symmetric keys, where the same key is used for both encryption and decryption, and asymmetric keys, which come in pairs (public and private) for digital signatures and secure key exchanges. Key security depends on effective management practices, including secure generation, storage, and distribution.

  // Source: Wikipedia
  component Symmetric Key [Shared Key]
    A key that is used for both encryption and decryption, and is typically shared among two or more communicating parties.

  // Source: Wikipedia
  component Key Exchange
    A method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. Historically, before the invention of public-key cryptography it required a secret key to be communicated through trusted couriers, diplomatic bags, or any other secure communication channel.

  // Source: Wikipedia
  component Block Cipher inherit Cipher
    A symmetric key cipher that processes data in fixed-size blocks with an unvarying transformation of plaintext into ciphertext using a secret key. Even a secure block cipher is suitable for the encryption of only a single block of data at a time, using a fixed key. A multitude of modes of operation have been designed to allow their repeated use in a secure way. Block ciphers also feature as building blocks in other cryptographic protocols, such as universal hash functions and pseudorandom number generators.

    Convert this block from plain text to ciphertext using this key!
    Convert this block from ciphertext to plain text using this key!

  // Source: Wikipedia
  component Stream Cipher inherit Cipher
    A symmetric key encryption algorithm that encrypts plaintext data one bit or byte at a time, producing a continuous stream of ciphertext. Stream ciphers generate a pseudorandom keystream that is combined with the plaintext, typically using the XOR operation, to produce the ciphertext. The transformation of the plaintext into ciphertext is dependent on the state of the cipher in particular the keystream.

    Convert this stream from plain text to ciphertext using this key!
    Convert this stream from ciphertext to plain text using this key!

  // Source: NIST SP 800-133 Rev. 2
  component Nonce
    A time-varying value that has (at most) an acceptably small chance of repeating. For example, the nonce may be a random value that is generated anew for each use, a timestamp, a sequence number, or some combination of these.

  // Source: Wikipedia
  component Man in the Middle (MITM)
    An attack where the attacker secretly relays and possibly alters the communications between two parties who believe that they are directly communicating with each other. In a successful attack, the reading or altering of the communications allows the attacker to break stated security properties of the protocol. As it aims to circumvent mutual authentication, a MITM attack can succeed only when the attacker impersonates each party sufficiently well to satisfy the expectations of the other party.

subsystem Communicating Parties
  The parties communicating in the Needham-Schroeder protocol.

  component Identity
    A unique identifier for a communicating party.

  component Message
    A collection of data that can be sent over a network. A message contains a sequence of data of specific types, and can include nested messages.

    Your contents are this data!
    What are your contents?

  component Encrypted Message
    A message that has been encrypted with a symmetric key.

    You are encrypted with this key!
    Are you encrypted with this key?

  component Party
    An entity capable of sending and receiving messages, and of carrying out (either variant of) the Needham-Schroeder symmetric key protocol.

    Is this message encrypted with the key you share with the trusted server?
    Encrypt this message with the key you share with the trusted server!
    What is your identity?

  component Server
    A trusted server that holds shared keys with all parties in the system. The establishment of these shared keys is out of scope for the protocol, and is assumed to occur out of band. There is only one such trusted server in the system.

    Is this message encrypted with the key you share with this party?
    Encrypt this message with the key you share with this party!
    What is your identity?

  component Alice inherit Party
    The initiator of the protocol, Alice wants to establish a session key with Bob.

  component Bob inherit Party
    The party with whom Alice wants to establish a session key.

// The actions taken in the original (broken) protocol.
events Original Protocol Actions

  AliceToServer
  Alice sends a plaintext message to Server containing her identity, Bob's identity,
  and a new nonce (N_A).

  ServerFromAlice
  Server receives a message containing Alice's identity, Bob's identity, and a nonce (N_A).
  Server responds with a message to Alice, encrypted using the key Alice and Server share (K_AS),
  containing N_A, a newly generated session key for Alice and Bob (K_AB), Bob's identity,
  and an inner message X, encrypted using the key Bob and Server share (K_BS), containing
  K_AB and Alice's identity.

  AliceFromServer
  Alice receives a message, encrypted using K_AS, containing a nonce N, a session key (K_AB),
  Bob's identity, and an inner message X that she cannot decrypt. If the N from this
  message matches the N_A Alice sent to the server, Alice sends the inner message X to
  Bob unaltered. Otherwise, the protocol fails.

  BobFromAliceKey
  Bob receives a message, encrypted using K_BS, containing K_AB and Alice's identity.
  Bob responds with a message to Alice, encrypted using K_AB, containing a new nonce (N_B).

  AliceFromBobNonce
  Alice receives a message, encrypted using K_AB, contianing a nonce (N_B). Alice responds
  with a message to Bob, encrypted using K_AB, containing N_B incremented by 1. Alice
  believes the secure channel with Bob to be established.

  BobFromAliceNonce
  Bob receives a message, encrypted using K_AB, containing a nonce N. If it is the nonce N_B
  he sent to Alice incremented by 1, Bob believes the secure channel with Alice to be
  established. Otherwise, the protocol fails.

  // to do, if we think it necessary: explicit events for Eve and a MITM attack

// The actions taken in the fixed protocol.
events Fixed Protocol Actions

  AliceToBobInitial
  Alice sends a plaintext message to Bob containing her identity.

  BobFromAliceInitial
  Bob receives a plaintext message with Alice's identity. Bob responds with a message to
  Alice, encrypted using the key Bob and Server share (K_BS), containing Alice's identity
  and a new nonce (N'_B).

  AliceFromBobNoncePrime
  Alice receives a message that she cannot decrypt. She sends a plaintext message to Server
  containing her identity, Bob's identity, a new nonce (N_A), and the message she cannot
  decrypt.

  ServerFromAliceFixed
  Server receives a message from Alice containing her identity, Bob's identity, nonce N_A
  and an inner message encrypted using K_BS that contains an identity I and nonce N'_B.
  If I matches Alice's identity, Server responds with a message to Alice, encrypted using
  the key Alice and Server share (K_AS), containing N_A, a newly generated session key for
  Alice and Bob (K_AB), Bob's identity, and an inner message X, encrypted using K_BS,
  containing K_AB, Alice's identity, and N'_B. Otherwise, the protocol fails.

  AliceFromServerFixed
  Alice receives a message from the Server, encrypted using the key Alice and Server share
  (K_AS), containing two identities I1 and I2, a nonce N, and an inner message X that she
  can't decrypt. If I1 is her identity, I2 is Bob's identity, and N matches the N_A that
  Alice sent the server, Alice sends the inner message X to Bob unaltered. Otherwise, the
  protocol fails.

  BobFromAliceKeyFixed
  Bob receives a message, encrypted using K_BS, containing K_AB, an identity I, and a
  nonce N. If I matches Alice's identity and N matches N'_B, Bob respnds with a message
  to Alice, encrypted using K_AB, containing a new nonce (N_B).

  // The remainder of the protocol is identical to the original.

  // AliceFromBobNonce
  // Alice receives a message, encrypted using K_AB, contianing a nonce (N_B). Alice responds
  // with a message to Bob, encrypted using K_AB, containing N_B incremented by 1. Alice
  // believes the secure channel with Bob to be established.

  // BobFromAliceNonce
  // Bob receives a message, encrypted using K_AB, containing a nonce N. If it is the nonce N_B
  // he sent to Alice incremented by 1, Bob believes the secure channel with Alice to be
  // established. Otherwise, the protocol fails.

scenarios Needham-Schroeder Scenarios

  Complete Original Protocol Execution
  Alice initiates the original protocol. Events AliceToServer, ServerFromAlice, AliceFromServer,
  BobFromAliceKey, AliceFromBobNonce, and BobFromAliceNonce proceed in that order with no
  errors, and a secure communication channel is established between Alice and Bob.

  Complete Fixed Protocol Execution
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, AliceFromServerFixed, BobFromAliceKeyFixed,
  AliceFromBobNonce, and BobFromAliceNonce proceed in that order with no errors, and a secure
  communication channel is established between Alice and Bob.

  Nonce Mismatch Detected by Alice in Original Protocol
  Alice initiates the orginal protocol. Events AliceToServer, ServerFromAlice, and
  AliceFromServer occur in that order, and during AliceFromServer the nonces don't match.
  The protocol ends.

  Nonce Mismatch Detected by Bob in Original Protocol
  Alice initiates the original protocol. Events AliceToServer, ServerFromAlice, AliceFromServer,
  BobFromAliceKey, AliceFromBobNonce, and BobFromAliceNonce proceed in that order, and during
  BobFromAliceNonce the nonces don't match. The protocol ends.

  Identity Mismatch Detected By Server in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, and ServerFromAliceFixed proceed in that order, and during
  ServerFromAliceFixed the identities for Alice within the message and the inner message
  don't match. The protocol ends.

  Identity Mismatch Detected By Alice in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, and AliceFromServerFixed proceed in that
  order, and during AliceFromServerFixed one of the identities does not match. The protocol
  ends.

  Nonce Mismatch Detected By Alice in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, and AliceFromServerFixed proceed in that
  order, and during AliceFromServerFixed the nonce in the message does not match
  the nonce Bob sent Alice. The protocol ends.

  Identity Mismatch Detected By Bob in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, AliceFromServerFixed, and BobFromAliceKeyFixed
  proceed in that order, and during BobFromAliceKeyFixed Alice's identity in the message
  does not match the identity Alice previously sent Bob. The protocol ends.

  First Nonce Mismatch Detected By Bob in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, AliceFromServerFixed, and BobFromAliceKeyFixed
  proceed in that order, and during BobFromAliceKeyFixed the nonce in the message
  does not match the nonce Bob sent in BobFromAliceInitial. The protocol ends.

  Second Nonce Mismatch Detected by Bob in Fixed Protocol
  Alice initiates the fixed protocol. Events AliceToBobInitial, BobFromAliceInitial,
  AliceFromBobNoncePrime, ServerFromAliceFixed, AliceFromServerFixed, BobFromAliceKeyFixed,
  AliceFromBobNonce, and BobFromAliceNonce proceed in that order, and during
  BobFromAliceNonce the nonce in the message does not match the nonce Bob sent Alice
  in BobFromAliceKey. The protocol ends.

requirements Needham-Schroeder Requirements

Symmetric
The protocol must use a symmetric cipher.

Two Party
The protocol must establish a session key between two parties.

Session Key Use
The session key established by the protocol must be usable for later
secure communications between the two parties who established the key.

Single Shared Key Per User
Any participant in the protocol only shares a single key with the
trusted server.

Single Session Key Per Pair
Any pair of participants that mutually generate a session key using
the protocol know the same session key.

Executable
The protocol, when executed among honest parties, always terminates
so long as messages are not lost.

// The reverse of the following requirement is not a requirement
// because the adversary could intercept/prevent delivery of the last
// protocol message where Alice confirms success to Bob; this is an
// instance of a fundamental distributed systems problem, the "Two
// Army Problem", about the impossibility of consensus in the presence
// of unreliable messaging.

Confirmation Two Way
If Bob believes that the protocol has concluded successfully with
Alice, then Alice believes that the protocol has concluded successfully
with Bob.

Secrecy of Shared Keys
The key shared between each protocol participant and the trusted server
is private to them.

// Violation of the following requirement is what allows the replay attack
// to which the original Needham-Schroeder algorithm is vulnerable.
Secrecy of Session Key
The session key is private to the protocol participants.

end
