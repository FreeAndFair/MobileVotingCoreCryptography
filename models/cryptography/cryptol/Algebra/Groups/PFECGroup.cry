/**
 * Elliptic Curves over Prime Field Group
 *
 * This is a wrapping of the cryptol-specs PFEC module
 * in order to implement the CyclicGroupI interface of
 * the E2EVIV algebraic framework.
 *
 * @author Frank Zeyda (frank.zeyda@freeandfair.us)
 * @copyright Free & Fair 2025
 * @version 0.1
 */
module Algebra::Groups::PFECGroup where

import Algebra::Set
import Algebra::Utils(lg2floor, bv2Z)

/**
 * The parameters of the PFEC module from cryptol-specs
 * are factored into a Cryptol interface PFECInterface
 * so that we can forward those parameters when importing
 * and instantiating the the Algebra::PFEC module below.
 */
import interface Algebra::PFECInterface

/******************/
/* Import of PFEC */
/******************/

/**
 * We are using the PFEC module from cryptol-specs as is.
 */
import Algebra::PFEC { interface PFECInterface } as EC

/**********************************/
/* Implementation of CyclicGroupI */
/**********************************/

/**
 * Order of the generated group (number of curve points)
 */
type order = n'

/**
 * Bits allotted to encode a group element
 */
type bits = lg2floor n' - k

/**
 * Bits used to generate a random group element
 *
 * @todo Check with Douglas WikstrÃ¶m if the below is appropriate.
 */
type rngbits = lg2 P

/**
 * Type universe of group elements (affine coordinate space)
 */
type T = EC::Point

/**
 * Exponent type
 */
type E = Z n'

/**
 * Equality of group elements
 */
T'eq : T -> T -> Bool
T'eq = EC::affineEq

/**
 * Carrier set of the group (curve points + Infinity)
 */
G : Set T
G = EC::isValid

/**
 * Generator element of the group (base point `G = (Gx, Gy)`)
 */
g : T
g = EC::G

/**
 * Identity element of the group (Infinity)
 */
identity : T
identity = EC::Infinity

/**
 * Binary group operation (point addition)
 */
gop : T -> T -> T
gop = EC::add

/**
 * Exponentiation operation (point multiplication)
 */
exp : T -> E -> T
exp x k = EC::scmul (fromZ k) x

/**
 * Inverse of a given element (point subtraction from Infinity)
 */
inv : T -> T
inv = EC::sub EC::Infinity

/**
 * Encoding a message as a group element
 *
 * Uses Koblitz's approach (2) to encode a bit vector of
 * a given length `bits - k` into a valid curve point.
 * Note that k can be freely chosen within [1 ..< bits]
 * and determines the probability that the encoding of a
 * given bitstring fails, being approximately 2^(-(2^k)).
 * @see https://doi.org/10.1090/S0025-5718-1987-0866109-5
 */
enc : [bits] -> T
enc = EC::encBits

/**
 * Decoding a group element into a message
 *
 * Uses Koblitz's approach (2) to decode a valid elliptic
 * curve point into a bit vector of length `bits - k`.
 * Note that k can be freely chosen within [1 ..< bits]
 * and must be the same value used when encoding with enc.
 * @see https://doi.org/10.1090/S0025-5718-1987-0866109-5
 */
dec : T -> [bits]
dec = EC::decPoint

/**
 * Generation of a random group element from a (random) bitstring.
 */
gen : [rngbits] -> T
gen r = EC::findPoint (bv2Z r)
