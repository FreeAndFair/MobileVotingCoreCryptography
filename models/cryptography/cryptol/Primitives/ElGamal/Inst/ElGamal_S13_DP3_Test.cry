/**
 * Smoke test of ElGamalâ€™s Cryptosystem in the context
 * of the direct product group of three components over
 * a Schnorr Group of order 13
 *
 * @author Frank Zeyda (frank.zeyda@freeandfair.us)
 * @copyright Free & Fair 2025
 * @version 0.1
 */
module Primitives::ElGamal::Inst::ElGamal_S13_DP3_Test where

import Primitives::ElGamal::Inst::ElGamal_S13_DP3

/**
 * Note that Encoder_S13_DP3 lifts Encoder_S13 into a
 * ProductEncoder with three elements. This is needed
 * since encoding by exponentiation (given a vocabulary)
 * ought be done component-wise rather than on the
 * product group element as a whole. (Doing the latter
 * is possible but would not give us the expected result.)
*/
import Algebra::Encoders::Inst::Encoder_S13_DP3
import Algebra::Encoders::Inst::EncoderUtils_S13_DP3

/**
 * Simple testing function encrypting and decrypting five messages
 * which here consist of list of three elements of the vocabulary.
 */
main : [5][3]Integer
main = tv'dec
  where tv = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 0, 1]]
        tv'enc = map Strict'Encode tv
        tv'run = map (gen_enc_dec 1 2) tv'enc
        tv'dec = map Strict'Decode tv'run

/**
 * Simple testing function encrypting and decrypting five messages
 * while producing additional trace output.
 *
 * @note The trace[Val] functions are currently not supported by
 * the Cryptol to Rust compiler; the code below does compile
 * but throws a runtime error (panic) when executed, indicating
 * that `trace` is not implemented yet.
 */
main'trace : [5][3]Integer
main'trace = traceVal "test result:" tv'dec
  where tv = traceVal "test vector:"
             [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 0, 1]]
        tv'enc = map Strict'Encode tv
        tv'run = map (gen_enc_dec 1 2) tv'enc
        tv'dec = map Strict'Decode tv'run
