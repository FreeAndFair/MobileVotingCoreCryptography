dnl
dnl This is the m4 input file for the composition of all the subprotocols
dnl that take place outside the air-gapped network (i.e., exposed to the
dnl Internet).
dnl
dnl @author Daniel M. Zimmerman
dnl @copyright Free & Fair 2025
dnl @version 0.1
dnl
dnl We change the m4 quote characters to <! and !>, so that they don't
dnl interfere with Tamarin's quote characters or any comments we might
dnl want to write. The incantation below makes that change, and prevents
dnl us from doing it in the included files by defining QUOTE_CHANGED.
dnl
define(`QUOTE_CHANGED')
changequote(`<!', `!>')
dnl
dnl This particular composition is uncomplicated; we just include the
dnl common primitives and all the relevant subprotocol rules and lemmas.
dnl
/*
  E2E-VIV Protocol - Composition of Internet-Exposed Subprotocols

  This theory is a composition of all the subprotocol theories for those
  subprotocols that are executed on systems exposed to the Internet. It
  will likely at some point include additional "cross-subprotocol" lemmas
  as well, but for now is just a straightforward composition.

  @author Daniel M. Zimmerman
  @copyright Free & Fair 2025
  @version 0.1
 */

theory e2eviv_internet

begin

define(<!USE_UNIQUE!>)dnl
define(<!USE_EUFCMA_SIGNING!>)dnl
define(<!USE_ABSTRACTED_NAOR_YUNG!>)dnl
define(<!USE_PSEUDONYM!>)dnl
define(<!USE_EQUALITY!>)dnl
define(<!USE_INEQUALITY!>)dnl
include(common/primitives.m4.inc)
define(<!USE_SECURE_CHANNELS!>)dnl
define(<!USE_SECURE_CHANNELS_INJECTION!>)dnl
define(<!USE_SECURE_CHANNELS_INTERCEPTION!>)dnl
include(common/channels.m4.inc)
define(<USE_NO_BB_ENTRY_FOR_HASH!>)dnl
include(common/bulletinboard.m4.inc)
define(<!USE_MOST_RECENT_AUTHORIZATION!>)dnl
define(<!USE_UNAUTHORIZED!>)dnl
define(<!USE_SUBMISSION_NOT_ON_BB!>)dnl
define(<!USE_NO_PREVIOUS_CAST!>)dnl
define(<!USE_MOST_RECENT_BALLOT!>)dnl
include(common/ballot_restrictions.m4.inc)

/* Mock Election Setup */
include(subprotocols/includes/mock_election_setup.m4.inc)

/*
  This rule has BB_Terminate_Request on its right-hand side, so
  that we don't get a well-formedness warning when we don't use it.
  Note that we are requesting to terminate a bulletin board that
  doesn't actually exist, so this has no real effect on anything.
 */
rule Mock_BBTerminate [role="Mock"]:
    []
  --[ Unique('BallotSubmission_Mock_BB_Terminate') ]->
    [ BB_Terminate_Request('fake_bbid', %1) ]

/* Voter Authentication */

include(subprotocols/voter_authentication.spthy.m4)

/* Ballot Submission */

include(subprotocols/ballot_submission.spthy.m4)

/* Ballot Cast */

include(subprotocols/ballot_cast.spthy.m4)

/* Ballot Check */

include(subprotocols/ballot_check.spthy.m4)

/* Sources */

/*
  This lemma says that incoming secure channel messages have
  to come from the secure channel rule, and that certain terms
  have to originate in certain rules. It is a translation of the
  lemma generated by Tamarin's "--auto-sources" option; however,
  it is _not_ marked as a sources lemma here because, when it is,
  Tamarin is unable to complete preprocessing regardless of how
  much memory it is given (up to 1 TB, at least).

  It is, therefore, here primarily as a reminder to fix, and a
  starting point for fixing, the composed protocol's partial
  deconstructions in the future.
 */
define(<!PROOF_SCRIPT!>, ifdef(<!INCLUDE_PROOF_SCRIPTS!>, <!compositions/includes/proofs/Sources_InternetProtocols.spthy.inc!>, <!/tmp/NOPROOFSCRIPT!>))dnl
syscmd(cat PROOF_SCRIPT > /dev/null 2>&1)dnl
lemma ifelse(sysval, <!0!>, <!ProofScript!>, <!NoProofScript!>)_InternetProtocols_Sources /* [sources] */:
  "
      (
        All m1 m2 m3 m4 #i.
              IN_SECURE_RECEIVE(m1, m2, m3, m4)@i
          ==>
              Ex #j.
              (
                  SecureChannel_In(m1, m2, m3, m4)@j
                &
                  #j < #i
              )
      )
    &
      (
        All m1 m2 m3 m4 m5 m6 m7 #i.
              IN_BALLOTCHECK_VA_CHECK(m1, m2, m3, m4, m5, m6, m7)@i
          ==>
              Ex #j.
              (
                  OUT_BALLOTCHECK_VA_CHECK(m1, m2, m3, m4, m5, m6, m7)@j
                &
                  #j < #i
              )
      )
    &
      (
        All m x #i.
              IN_PSEUDO_TERM(m, x)@i
          ==>
              (
                  (Ex #j.
                    (
                        KU(x)@j
                      &
                        #j < #i
                    )
                  )
                |
                  (Ex #j.
                    (
                        OUT_PSEUDO_TERM(m)@j
                      &
                        #j < #i
                    )
                  )
              )
      )
  "
dnl Include the proof script, if one exists.
sinclude(PROOF_SCRIPT)dnl

/* Composition Executability Lemmas */

/*
  Most of the executability lemmas from the individual protocols are
  too difficult for Tamarin to prove automatically even without the
  protocols being composed. What we really want to show for
  executability is that a ballot can be successfully cast, and a
  ballot can be successfully checked, by a voter that makes it all
  the way through the authentication, submission, and cast/check
  protocols. We eliminate the possibility of adversary action on the
  secure channels to reduce the search space.
 */

/*
  This lemma states that a ballot can be successfully cast (and the
  VA receives confirmation of such).
 */
define(<!PROOF_SCRIPT!>, ifdef(<!INCLUDE_PROOF_SCRIPTS!>, <!compositions/includes/proofs/InternetProtocols_Cast_Confirm.spthy.inc!>, <!/tmp/NOPROOFSCRIPT!>))dnl
syscmd(cat PROOF_SCRIPT > /dev/null 2>&1)dnl
lemma ifelse(sysval, <!0!>, <!ProofScript!>, <!NoProofScript!>)_Executability_InternetProtocols_Cast_Confirm:
  exists-trace
  "
      (Ex ec va_id pseudo ballot cryptograms r sub_tracker cast_tracker #i.
        VA_CastConfirmation_Trace(ec, va_id, pseudo, ballot, cryptograms, r, sub_tracker, cast_tracker)@i)
    &
      /* prevent message injection to reduce search space */
      not (Ex m #t. SecureChannel_InjectedMessage(m)@t)
    &
      /* prevent message interception to reduce search space */
      not (Ex m #t. SecureChannel_InterceptedMessage(m)@t)
  "
dnl Include the proof script, if one exists.
sinclude(PROOF_SCRIPT)dnl

/*
  This lemma states that a ballot can be successfully checked (as evidenced
  by the VA being able to "OK" a ballot check).
 */
define(<!PROOF_SCRIPT!>, ifdef(<!INCLUDE_PROOF_SCRIPTS!>, <!compositions/includes/proofs/InternetProtocols_Check_OK.spthy.inc!>, <!/tmp/NOPROOFSCRIPT!>))dnl
syscmd(cat PROOF_SCRIPT > /dev/null 2>&1)dnl
lemma ifelse(sysval, <!0!>, <!ProofScript!>, <!NoProofScript!>)_Executability_InternetProtocols_Check_OK:
  exists-trace
  "
      (Ex ec va_id p b c r t pk #i.
        VA_CheckResult_OK_Trace(ec, va_id, p, b, c, r, t, pk)@i)
    &
      /* prevent message injection to reduce search space */
      not (Ex m #t. SecureChannel_InjectedMessage(m)@t)
    &
      /* prevent message interception to reduce search space */
      not (Ex m #t. SecureChannel_InterceptedMessage(m)@t)
  "
dnl Include the proof script, if one exists.
sinclude(PROOF_SCRIPT)dnl

dnl We don't need a newline here, it comes from the included file
end
